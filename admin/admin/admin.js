// admin.js - Firebase ile Ã‡alÄ±ÅŸan Nihai SÃ¼rÃ¼m

document.addEventListener('DOMContentLoaded', () => {
    
    // Firebase veritabanÄ± baÄŸlantÄ±sÄ±nÄ± HTML'den alÄ±yoruz
    // (admin-dashboard.html'de 'db' deÄŸiÅŸkenini global olarak tanÄ±mlamÄ±ÅŸtÄ±k)
    if (typeof db === 'undefined') {
        alert("Firebase veritabanÄ± baÄŸlantÄ±sÄ± kurulamadÄ±. LÃ¼tfen admin-dashboard.html dosyasÄ±nÄ± kontrol edin.");
        return;
    }

    const app = {
        // =============== STATE MANAGEMENT (DURUM YÃ–NETÄ°MÄ°) ===============
        products: [], // ÃœrÃ¼nleri Firebase'den Ã§ekeceÄŸiz
        orders: [],   // SipariÅŸleri Firebase'den Ã§ekeceÄŸiz
        categories: [], // Kategoriler Ã¼rÃ¼nlere gÃ¶re dinamik oluÅŸacak
        currentView: 'orders',
        orderListener: null, // SipariÅŸleri dinleyecek olan baÄŸlantÄ±
        productListener: null, // ÃœrÃ¼nleri dinleyecek olan baÄŸlantÄ±
        
        // =============== DOM ELEMENTS (HTML ELEMENTLERÄ°) ===============
        elements: {
            navTabs: document.getElementById('nav-tabs'),
            tabContents: document.querySelectorAll('.tab-content'),
            logoutButton: document.getElementById('logout-button'), // Ã‡Ä±kÄ±ÅŸ butonu (HenÃ¼z eklemedik ama ID'si bu)
            
            // SipariÅŸler Sekmesi
            ordersTableBody: document.getElementById('orders-table-body'),
            notification: document.getElementById('notification'),
            notificationSound: document.getElementById('notification-sound'),

            // ÃœrÃ¼nler Sekmesi
            productSearch: document.getElementById('product-search'),
            productCategoryFilter: document.getElementById('product-category-filter'),
            addProductButton: document.getElementById('add-product-button'),
            productTableBody: document.getElementById('product-table-body'),
            
            // Silinenler Sekmesi
            deletedProductsTableBody: document.getElementById('deleted-products-table-body'),

            // Modal
            modal: document.getElementById('modal'),
        },
        
        // =============== METÄ°N STANDARTLAÅžTIRMA (Arama iÃ§in) ===============
        normalizeText(str) {
            if (!str) return '';
            return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "")
                .replace(/Ä±/g, 'i').replace(/Ä°/g, 'I').toLowerCase();
        },

        // =============== UYGULAMAYI BAÅžLATMA ===============
        init() {
            // 1. Olay dinleyicilerini kur
            this.setupEventListeners();
            
            // 2. Ä°lk gÃ¶rÃ¼nÃ¼mÃ¼ ayarla (SipariÅŸler)
            this.renderView('orders');
            
            // 3. Firebase'den verileri DÄ°NLEMEYE baÅŸla
            this.listenForOrders();
            this.listenForProducts();
        },

        // =============== OLAY DÄ°NLEYÄ°CÄ°LERÄ° (EVENT LISTENERS) ===============
        setupEventListeners() {
            this.elements.navTabs?.addEventListener('click', this.handleTabClick.bind(this));
            
            // ÃœrÃ¼n filtreleme
            this.elements.productSearch?.addEventListener('input', this.renderProducts.bind(this));
            this.elements.productCategoryFilter?.addEventListener('change', this.renderProducts.bind(this));
            
            // Yeni Ã¼rÃ¼n ekle butonu
            this.elements.addProductButton?.addEventListener('click', () => this.renderProductModal());

            // Modal kapatma
            this.elements.modal.addEventListener('click', e => {
                 if (e.target === this.elements.modal || e.target.closest('.close-modal-btn')) {
                     this.closeModal();
                 }
            });

            // Tablo iÃ§indeki dinamik butonlar (DÃ¼zenle, Sil, Detay, vb.)
            document.body.addEventListener('click', this.handleDynamicClicks.bind(this));
            
            // Ã‡Ä±kÄ±ÅŸ yap butonu (admin-login.html'e yÃ¶nlendirir)
            // Not: GerÃ§ek bir oturum yÃ¶netimi iÃ§in Firebase Auth kullanÄ±lmalÄ±, 
            // bu ÅŸimdilik LocalStorage tabanlÄ± basit bir "Ã§Ä±kÄ±ÅŸ yap" simÃ¼lasyonu.
            this.elements.logoutButton?.addEventListener('click', () => {
                if (confirm("Ã‡Ä±kÄ±ÅŸ yapmak istediÄŸinize emin misiniz?")) {
                    // GerÃ§ek Firebase Auth kullanmÄ±yorsak, basit bir yÃ¶nlendirme yaparÄ±z.
                    // EÄŸer admin-login.html'de bir "giriÅŸ yaptÄ±" anahtarÄ± koyduysanÄ±z
                    // localStorage.removeItem('adminLoggedIn'); 
                    window.location.href = 'admin-login.html'; // veya giriÅŸ sayfanÄ±zÄ±n adÄ±
                }
            });
        },

        // Sekme deÄŸiÅŸtirme
        handleTabClick(e) {
            const target = e.target.closest('.tab-button');
            if (target) {
                const tabName = target.dataset.tab;
                this.renderView(tabName);
            }
        },
        
        // Dinamik butonlara tÄ±klama (TÃ¼m "data-action" butonlarÄ±)
        handleDynamicClicks(e) {
            const target = e.target.closest('[data-action]');
            if (!target) return;
            
            const action = target.dataset.action;
            const id = target.dataset.id; // Firebase Document ID'si

            switch(action) {
                case 'view-order': this.renderOrderDetailModal(id); break;
                case 'edit-product': this.renderProductModal(id); break;
                case 'delete-product': this.softDeleteProduct(id); break;
                case 'restore-product': this.restoreProduct(id); break;
                case 'perm-delete-product': this.permanentlyDeleteProduct(id); break;
                case 'toggle-stock': this.toggleAvailability(id); break;
            }
        },

        // =============== GÃ–RÃœNÃœM YÃ–NETÄ°CÄ°SÄ° (VIEW MANAGER) ===============
        renderView(view) {
            this.currentView = view;
            
            // TÃ¼m sekmeleri gizle, aktifi gÃ¶ster
            this.elements.tabContents.forEach(tc => tc.classList.remove('active'));
            document.getElementById(`tab-${view}`).classList.add('active');

            // ButonlarÄ±n aktif durumunu ayarla
            this.elements.navTabs.querySelectorAll('.tab-button').forEach(tb => {
                tb.classList.toggle('active', tb.dataset.tab === view);
            });

            // Ä°lgili sekmenin iÃ§eriÄŸini yeniden Ã§iz
            switch (view) {
                case 'orders': this.renderOrders(); break;
                case 'products': this.renderProducts(); break;
                case 'deleted': this.renderDeletedProducts(); break;
            }
        },

        // =============== SÄ°PARÄ°Åž YÃ–NETÄ°MÄ° (FIREBASE) ===============

        listenForOrders() {
            // 'orders' koleksiyonunu dinle, 'createdAt' (oluÅŸturulma tarihi)
            // alanÄ±na gÃ¶re en yeniden eskiye doÄŸru sÄ±rala.
            db.collection("orders").orderBy("createdAt", "desc")
              .onSnapshot((querySnapshot) => {
                
                const isInitialLoad = this.orders.length === 0;
                
                this.orders = []; // SipariÅŸ listesini temizle
                querySnapshot.forEach((doc) => {
                    // Firebase'den gelen veriyi ve belge ID'sini al
                    this.orders.push({ id: doc.id, ...doc.data() });
                });

                // EÄŸer o anda 'orders' sekmesindeysek, tabloyu yenile
                if (this.currentView === 'orders') {
                    this.renderOrders();
                }

                // Ä°lk yÃ¼kleme deÄŸilse ve yeni sipariÅŸ gelmiÅŸse bildirim gÃ¶ster
                if (!isInitialLoad) {
                    this.showNotification('ðŸ”” Yeni SipariÅŸ Geldi!');
                }
                
            }, (error) => {
                console.error("SipariÅŸler dinlenirken hata oluÅŸtu: ", error);
                alert("SipariÅŸ veritabanÄ±na baÄŸlanÄ±lamadÄ±. SayfayÄ± yenileyin.");
            });
        },
        
        renderOrders() {
            if (!this.elements.ordersTableBody) return;
            
            // SipariÅŸler dizisini HTML tablo satÄ±rlarÄ±na dÃ¶nÃ¼ÅŸtÃ¼r
            this.elements.ordersTableBody.innerHTML = this.orders.map(order => {
                const total = order.total || 0;
                const customer = order.customer || {};
                
                return `
                    <tr class="${order.status === 'Yeni SipariÅŸ' ? 'new-order-highlight' : ''}">
                        <td>${order.orderNumber || order.id.slice(-6)}</td>
                        <td>${customer.name || 'N/A'}</td>
                        <td>${customer.phone || 'N/A'}</td>
                        <td>${total.toFixed(2)} â‚º</td>
                        <td>
                            <select class="status-select" data-id="${order.id}" onchange="app.updateOrderStatus(this)">
                                <option value="Yeni SipariÅŸ" ${order.status === 'Yeni SipariÅŸ' ? 'selected' : ''}>Yeni SipariÅŸ</option>
                                <option value="HazÄ±rlanÄ±yor" ${order.status === 'HazÄ±rlanÄ±yor' ? 'selected' : ''}>HazÄ±rlanÄ±yor</option>
                                <option value="Yola Ã‡Ä±ktÄ±" ${order.status === 'Yola Ã‡Ä±ktÄ±' ? 'selected' : ''}>Yola Ã‡Ä±ktÄ±</option>
                                <option value="Teslim Edildi" ${order.status === 'Teslim Edildi' ? 'selected' : ''}>Teslim Edildi</option>
                                <option value="Ä°ptal Edildi" ${order.status === 'Ä°ptal Edildi' ? 'selected' : ''}>Ä°ptal Edildi</option>
                            </select>
                        </td>
                        <td>
                            <button class="button btn-edit" data-action="view-order" data-id="${order.id}">Detay</button>
                        </td>
                    </tr>
                `;
            }).join('');
            
            // 'onchange'in Ã§alÄ±ÅŸmasÄ± iÃ§in 'app' objesini global 'window'a ekliyoruz
            window.app = this; 
        },

        updateOrderStatus(selectElement) {
            const orderId = selectElement.dataset.id;
            const newStatus = selectElement.value;

            // Firebase'deki ilgili sipariÅŸ belgesini gÃ¼ncelle
            db.collection("orders").doc(orderId).update({
                status: newStatus
            })
            .then(() => {
                this.showNotification(`SipariÅŸ #${orderId.slice(-6)} durumu gÃ¼ncellendi.`);
                // Yerel diziyi de gÃ¼ncelle (sayfa yenilemeden gÃ¶rÃ¼nÃ¼m deÄŸiÅŸsin)
                const order = this.orders.find(o => o.id === orderId);
                if(order) order.status = newStatus;
                this.renderOrders(); // Tabloyu yeniden Ã§iz
            })
            .catch(error => {
                console.error("SipariÅŸ durumu gÃ¼ncellenirken hata: ", error);
                alert("Durum gÃ¼ncellenemedi.");
            });
        },

        // =============== ÃœRÃœN YÃ–NETÄ°MÄ° (FIREBASE) ===============

        listenForProducts() {
            // 'products' koleksiyonunu dinle
            db.collection("products").orderBy("name", "asc")
              .onSnapshot((querySnapshot) => {
                
                this.products = [];
                querySnapshot.forEach((doc) => {
                    this.products.push({ id: doc.id, ...doc.data() });
                });

                // Kategorileri dinamik olarak yeniden oluÅŸtur
                this.categories = [...new Set(this.products.map(p => p.category))].sort();
                this.populateCategoryFilter();

                // Hangi sekmedeysek orayÄ± yenile
                this.renderView(this.currentView);
                
            }, (error) => {
                console.error("ÃœrÃ¼nler dinlenirken hata oluÅŸtu: ", error);
                alert("ÃœrÃ¼n veritabanÄ±na baÄŸlanÄ±lamadÄ±. SayfayÄ± yenileyin.");
            });
        },
        
        populateCategoryFilter() {
            if (!this.elements.productCategoryFilter) return;
            
            const currentVal = this.elements.productCategoryFilter.value; // SeÃ§ili filtreyi koru
            this.elements.productCategoryFilter.innerHTML = '<option value="all">TÃ¼m Kategoriler</option>';
            
            this.categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category;
                option.textContent = category;
                this.elements.productCategoryFilter.appendChild(option);
            });
            
            this.elements.productCategoryFilter.value = currentVal; // Filtreyi tekrar ayarla
        },

        renderProducts() {
            if (!this.elements.productTableBody) return;
            
            const query = this.normalizeText(this.elements.productSearch.value);
            const selectedCategory = this.elements.productCategoryFilter.value;

            // Sadece 'deleted' alanÄ± false olan (veya olmayan) Ã¼rÃ¼nleri filtrele
            const filteredProducts = this.products.filter(p => {
                const isNotDeleted = !p.deleted;
                const nameMatch = this.normalizeText(p.name).includes(query);
                const categoryMatch = selectedCategory === 'all' || p.category === selectedCategory;
                return isNotDeleted && nameMatch && categoryMatch;
            });
            
            this.elements.productTableBody.innerHTML = filteredProducts
                .map(p => this.createProductTableRowHTML(p))
                .join('');
        },
        
        createProductTableRowHTML(product) {
            return `
                <tr>
                    <td>${product.name}</td>
                    <td>${product.category}</td>
                    <td>${(product.price || 0).toFixed(2)} â‚º</td>
                    <td>
                        <span class="status-badge status-${product.available ? 'mcvcut' : 'tukendi'}" 
                              data-action="toggle-stock" 
                              data-id="${product.id}">
                            ${product.available ? 'Mevcut' : 'TÃ¼kendi'}
                        </span>
                    </td>
                    <td class="action-buttons">
                        <button class="button btn-edit" data-action="edit-product" data-id="${product.id}">
                            <i class="fas fa-pencil-alt"></i> DÃ¼zenle
                        </button>
                        <button class="button btn-delete" data-action="delete-product" data-id="${product.id}">
                            <i class="fas fa-trash"></i> Sil
                        </button>
                    </td>
                </tr>
            `;
        },

        toggleAvailability(productId) {
            const product = this.products.find(p => p.id === productId);
            if (product) {
                const newAvailability = !product.available;
                
                // Firebase'de gÃ¼ncelle
                db.collection("products").doc(productId).update({
                    available: newAvailability
                })
                .then(() => {
                    this.showNotification(`${product.name} durumu gÃ¼ncellendi.`);
                    // Yerel diziyi de anÄ±nda gÃ¼ncelle (dinleyici zaten yakalar ama
                    // bu daha hÄ±zlÄ± hissettirir)
                    product.available = newAvailability;
                    this.renderProducts();
                })
                .catch(e => console.error("Stok durumu gÃ¼ncellenirken hata", e));
            }
        },

        softDeleteProduct(productId) {
            if (!confirm("Bu Ã¼rÃ¼nÃ¼ silmek istediÄŸinize emin misiniz? ÃœrÃ¼n, 'Silinen ÃœrÃ¼nler' sekmesine taÅŸÄ±nacak.")) return;

            // Firebase'de 'deleted' flag'ini true yap
            db.collection("products").doc(productId).update({
                deleted: true,
                deletedAt: new Date() // Ne zaman silindiÄŸini kaydet
            })
            .then(() => this.showNotification("ÃœrÃ¼n silinenlere taÅŸÄ±ndÄ±."))
            .catch(e => console.error("ÃœrÃ¼n silinirken hata", e));
            
            // Dinleyici (listener) deÄŸiÅŸikliÄŸi otomatik yakalayÄ±p 
            // 'products' ve 'deletedProducts' sekmelerini yeniden Ã§izecek.
        },
        
        // =============== SÄ°LÄ°NEN ÃœRÃœNLER SEKMESÄ° (FIREBASE) ===============
        renderDeletedProducts() {
            if (!this.elements.deletedProductsTableBody) return;

            // Sadece 'deleted' alanÄ± true olan Ã¼rÃ¼nleri filtrele
            const deleted = this.products.filter(p => p.deleted === true);
            
            this.elements.deletedProductsTableBody.innerHTML = deleted.map(p => `
                <tr>
                    <td>${p.id}</td>
                    <td>${p.name}</td>
                    <td>${p.category}</td>
                    <td class="action-buttons">
                        <button class="button btn-edit" data-action="restore-product" data-id="${p.id}">Geri YÃ¼kle</button>
                        <button class="button btn-delete" data-action="perm-delete-product" data-id="${p.id}">KalÄ±cÄ± Sil</button>
                    </td>
                </tr>
            `).join('');
        },

        restoreProduct(productId) {
            // Firebase'de 'deleted' flag'ini false yap
            db.collection("products").doc(productId).update({
                deleted: false
                // Ä°steÄŸe baÄŸlÄ±: deletedAt alanÄ±nÄ± da kaldÄ±rabilirsin
                // deletedAt: firebase.firestore.FieldValue.delete() 
            })
            .then(() => this.showNotification("ÃœrÃ¼n geri yÃ¼klendi."))
            .catch(e => console.error("ÃœrÃ¼n geri yÃ¼klenirken hata", e));
        },
        
        permanentlyDeleteProduct(productId) {
            if (!confirm("BU Ä°ÅžLEM GERÄ° ALINAMAZ! ÃœrÃ¼nÃ¼ veritabanÄ±ndan kalÄ±cÄ± olarak silmek istediÄŸinize emin misiniz?")) return;
            
            // Firebase'den belgeyi tamamen sil
            db.collection("products").doc(productId).delete()
            .then(() => this.showNotification("ÃœrÃ¼n kalÄ±cÄ± olarak silindi."))
            .catch(e => console.error("ÃœrÃ¼n kalÄ±cÄ± silinirken hata", e));
        },

        // =============== MODAL VE BÄ°LDÄ°RÄ°M FONKSÄ°YONLARI ===============

        renderOrderDetailModal(orderId) {
            const order = this.orders.find(o => o.id === orderId);
            if (!order) return;

            const itemsHTML = order.items.map(item => `
                <li class="summary-item">
                    <div class="summary-item__details">
                        <span class="summary-item__name">${item.quantity}x ${item.name}</span>
                        ${item.options ? `<span class="summary-item__options">${item.options}</span>` : ''}
                    </div>
                    <span class="summary-item__price">${(item.price * item.quantity).toFixed(2)} â‚º</span>
                </li>
            `).join('');
            
            const customer = order.customer || {};
            const createdAt = order.createdAt ? order.createdAt.toDate().toLocaleString('tr-TR') : 'Bilinmiyor';

            const html = `
                <div class="modal">
                    <div class="modal-header">
                        <h3 class="modal-title">SipariÅŸ DetayÄ±: ${order.orderNumber}</h3>
                        <button class="close-modal-btn">&times;</button>
                    </div>
                    <div class="modal-body">
                        <fieldset>
                            <legend>MÃ¼ÅŸteri Bilgileri</legend>
                            <p><strong>Ad Soyad:</strong> ${customer.name || 'N/A'}</p>
                            <p><strong>Telefon:</strong> ${customer.phone || 'N/A'}</p>
                            <p><strong>BÃ¶lge:</strong> ${customer.zone || 'N/A'}</p>
                            <p><strong>Adres:</strong> ${customer.address || 'N/A'}</p>
                            ${customer.note ? `<p><strong>Not:</strong> ${customer.note}</p>` : ''}
                        </fieldset>
                        <fieldset>
                            <legend>ÃœrÃ¼nler</legend>
                            <ul class="checkout-summary">${itemsHTML}</ul>
                        </fieldset>
                        
                        <h4 style="text-align: right; border-top: 1px solid var(--c-border); padding-top: 1rem; margin-top: 1rem;">
                            Toplam Tutar: ${order.total.toFixed(2)} â‚º
                        </h4>
                        <p style="text-align: right; font-size: 0.8em; color: var(--c-text-secondary);">
                            SipariÅŸ Tarihi: ${createdAt}
                        </p>
                    </div>
                </div>`;
            this.elements.modal.innerHTML = html;
            this.elements.modal.style.display = 'flex';
        },

        renderProductModal(productId = null) {
            const isEditing = productId !== null;
            const product = isEditing ? this.products.find(p => p.id === productId) : {};
            
            // OpsiyonlarÄ± (Ä°Ã§indekiler, AcÄ± Seviyesi vb.) oluÅŸturmak iÃ§in yardÄ±mcÄ± fonksiyon
            const renderOptions = (options = []) => {
                // Not: 'product.js' dosyasÄ±ndaki opsiyon formatÄ± ile script.js'deki farklÄ± olabilir.
                // Biz script.js'nin kullandÄ±ÄŸÄ± formata (key-value) gÃ¶re hareket etmeliyiz.
                // Senin script.js'n ÅŸu formatÄ± kullanÄ±yor: 
                // options: { "AcÄ± Seviyesi": ['AcÄ±sÄ±z', 'Az AcÄ±lÄ±'], "Ä°Ã§indekiler": [...] }
                
                const optionsObj = product.options || {};
                
                return Object.keys(optionsObj).map((title, groupIndex) => `
                    <div class="option-group" data-group-index="${groupIndex}">
                        <div class="option-group-header">
                            <input type="text" placeholder="Grup AdÄ± (Ã–rn: AcÄ± Seviyesi)" value="${title}" class="option-title-input">
                            
                            <button type="button" class="button btn-delete remove-option-group-btn">&times;</button>
                        </div>
                        <div class="choices-list">
                            ${(optionsObj[title] || []).map((choice) => `
                                <div class="choice-item">
                                    <input type="text" placeholder="SeÃ§enek AdÄ±" value="${choice}" class="choice-name-input">
                                    <button type="button" class="button btn-delete remove-choice-btn">&times;</button>
                                </div>
                            `).join('')}
                        </div>
                        <button type="button" class="button button-add-choice add-choice-btn">+ SeÃ§enek Ekle</button>
                    </div>
                `).join('');
            };

            const modalHTML = `
                <div class="modal product-modal">
                    <div class="modal-header">
                        <h3 class="modal-title">${isEditing ? 'ÃœrÃ¼nÃ¼ DÃ¼zenle' : 'Yeni ÃœrÃ¼n Ekle'}</h3>
                        <button class="close-modal-btn">&times;</button>
                    </div>
                    <form id="product-form">
                        <div class="modal-body">
                            <div class="form-grid">
                                <div class="form-group">
                                    <label>ÃœrÃ¼n AdÄ±</label>
                                    <input type="text" name="name" value="${product.name || ''}" required>
                                </div>
                                <div class="form-group">
                                    <label>Fiyat (â‚º)</label>
                                    <input type="number" name="price" value="${product.price || ''}" required step="0.50">
                                </div>
                                <div class="form-group">
                                    <label>Kategori</label>
                                    <select name="category" required>
                                        <option value="" disabled ${!product.category ? 'selected' : ''}>Kategori SeÃ§in</option>
                                        ${this.categories.map(c => `<option ${c === product.category ? 'selected' : ''}>${c}</option>`).join('')}
                                    </select>
                                    <input type="text" id="new-category-input" placeholder="Veya yeni kategori adÄ± girin...">
                                </div>
                                <div class="form-group">
                                    <label>Stok Durumu</label>
                                    <select name="available">
                                        <option value="true" ${product.available !== false ? 'selected' : ''}>Mevcut</option>
                                        <option value="false" ${product.available === false ? 'selected' : ''}>TÃ¼kendi</option>
                                    </select>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label>GÃ¶rsel Linki</label>
                                <input type="text" name="image" value="${product.image || ''}" placeholder="Ã–rn: ../images/urun.jpg">
                                <img id="image-preview" src="${product.image || ''}" class="image-preview ${!product.image ? 'hidden' : ''}">
                            </div>
                            
                            <hr style="border-color: var(--c-border); margin: 1.5rem 0;">
                            
                            <h4>Ä°Ã§indekiler & SeÃ§enekler</h4>
                            <div id="options-editor" class="options-editor">${renderOptions(product.options)}</div>
                            <button type="button" id="add-option-group-btn" class="button button-add-choice">+ Yeni Grup Ekle (Ã–rn: AcÄ± Seviyesi)</button>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="button button-secondary close-modal-btn">Ä°ptal</button>
                            <button type="submit" class="button" data-id="${product.id || ''}">${isEditing ? 'GÃ¼ncelle' : 'Kaydet'}</button>
                        </div>
                    </form>
                </div>`;
            
            this.elements.modal.innerHTML = modalHTML;
            this.elements.modal.style.display = 'flex';
            this.initProductFormListeners();
        },
        
        initProductFormListeners() {
            document.getElementById('product-form').addEventListener('submit', this.handleProductFormSubmit.bind(this));
            document.getElementById('add-option-group-btn').addEventListener('click', this.addOptionGroup.bind(this));
            
            const optionsEditor = document.getElementById('options-editor');
            optionsEditor.addEventListener('click', e => {
                if(e.target.matches('.add-choice-btn')) this.addChoiceToGroup(e.target.closest('.option-group'));
                if(e.target.matches('.remove-option-group-btn')) e.target.closest('.option-group').remove();
                if(e.target.matches('.remove-choice-btn')) e.target.closest('.choice-item').remove();
            });

            // Resim linki girildiÄŸinde Ã¶nizlemeyi gÃ¶ster
            document.querySelector('input[name="image"]').addEventListener('input', e => {
                const preview = document.getElementById('image-preview');
                preview.src = e.target.value;
                preview.classList.toggle('hidden', !e.target.value);
            });
        },

        addOptionGroup() {
            const editor = document.getElementById('options-editor');
            const newGroup = document.createElement('div');
            newGroup.className = 'option-group';
            newGroup.innerHTML = `
                <div class="option-group-header">
                    <input type="text" placeholder="Grup AdÄ± (Ã–rn: AcÄ± Seviyesi)" class="option-title-input">
                    <button type="button" class="button btn-delete remove-option-group-btn">&times;</button>
                </div>
                <div class="choices-list"></div>
                <button type="button" class="button button-add-choice add-choice-btn">+ SeÃ§enek Ekle</button>
            `;
            editor.appendChild(newGroup);
        },

        addChoiceToGroup(groupElement) {
            const list = groupElement.querySelector('.choices-list');
            const newChoice = document.createElement('div');
            newChoice.className = 'choice-item';
            newChoice.innerHTML = `
                <input type="text" placeholder="SeÃ§enek AdÄ± (Ã–rn: AcÄ±sÄ±z)" class="choice-name-input">
                <button type="button" class="button btn-delete remove-choice-btn">&times;</button>
            `;
            list.appendChild(newChoice);
        },

        async handleProductFormSubmit(e) {
            e.preventDefault();
            
            const form = e.target;
            const submitButton = form.querySelector('button[type="submit"]');
            const productId = submitButton.dataset.id; // Kaydet/GÃ¼ncelle butonundan ID'yi al
            const isEditing = !!productId;
            
            const formData = new FormData(form);
            
            // OpsiyonlarÄ± 'script.js'nin anlayacaÄŸÄ± { key: value[] } formatÄ±na Ã§evir
            const options = {};
            document.querySelectorAll('#options-editor .option-group').forEach(group => {
                const title = group.querySelector('.option-title-input').value.trim();
                if (!title) return;
                
                const choices = Array.from(group.querySelectorAll('.choice-name-input'))
                                     .map(input => input.value.trim())
                                     .filter(Boolean); // BoÅŸ seÃ§enekleri atla
                
                if (choices.length > 0) {
                    options[title] = choices;
                }
            });

            // Yeni kategori girilmiÅŸ mi kontrol et
            const newCategory = document.getElementById('new-category-input').value.trim();
            const selectedCategory = newCategory || formData.get('category');
            
            if(newCategory && !this.categories.includes(newCategory)) {
                this.categories.push(newCategory);
                // Kategori listesini gÃ¼ncellemeye gerek yok, product listener halledecek
            }
            
            const productData = {
                name: formData.get('name'),
                price: parseFloat(formData.get('price')),
                category: selectedCategory,
                available: formData.get('available') === 'true',
                image: formData.get('image'),
                options: options, // DÃ¶nÃ¼ÅŸtÃ¼rÃ¼lmÃ¼ÅŸ opsiyon objesi
                deleted: false // Yeni/gÃ¼ncellenen Ã¼rÃ¼nÃ¼n silinmediÄŸini belirt
            };
            
            // Butonu kilitle
            submitButton.disabled = true;
            submitButton.textContent = 'Kaydediliyor...';
            
            try {
                if (isEditing) {
                    // GÃ¼ncelleme
                    await db.collection("products").doc(productId).update(productData);
                    this.showNotification("ÃœrÃ¼n baÅŸarÄ±yla gÃ¼ncellendi.");
                } else {
                    // Yeni Ekleme
                    // SÄ±ralama iÃ§in bir orderIndex ekleyebiliriz
                    productData.orderIndex = this.products.length + 1; 
                    await db.collection("products").add(productData);
                    this.showNotification("ÃœrÃ¼n baÅŸarÄ±yla eklendi.");
                }
                
                // Dinleyici (listener) deÄŸiÅŸikliÄŸi otomatik yakalayacak ve
                // tabloyu gÃ¼ncelleyecek. Biz sadece modalÄ± kapatÄ±yoruz.
                this.closeModal();

            } catch (error) {
                console.error("ÃœrÃ¼n kaydedilirken hata: ", error);
                alert("ÃœrÃ¼n kaydedilemedi. LÃ¼tfen tekrar deneyin.");
                submitButton.disabled = false;
                submitButton.textContent = isEditing ? 'GÃ¼ncelle' : 'Kaydet';
            }
        },

        closeModal() {
            this.elements.modal.style.display = 'none';
            this.elements.modal.innerHTML = '';
        },

        showNotification(message) {
            const el = this.elements.notification;
            if (!el) return;
            
            el.textContent = message;
            el.style.display = 'block'; // GÃ¶ster
            
            // Ses Ã§al (eÄŸer varsa)
            this.elements.notificationSound?.play().catch(e => console.warn("Bildirim sesi Ã§alÄ±namadÄ±.", e));
            
            // 3 saniye sonra gizle
            setTimeout(() => {
                el.style.display = 'none';
            }, 3000);
        }
    };
    
    // UygulamayÄ± BaÅŸlat
    app.init();
});

document.addEventListener("DOMContentLoaded", () => {
    
    // Gerekli HTML elementlerini seÃ§
    const loginForm = document.getElementById("login-form");
    const usernameInput = document.getElementById("username");
    const passwordInput = document.getElementById("password");
    const errorMessage = document.getElementById("error-message");
    const hintMessage = document.getElementById("hint-message");
    const forgotPasswordLink = document.getElementById("forgot-password-link");
    const submitButton = loginForm.querySelector('button[type="submit"]');

    // --- 1. GÄ°RÄ°Åž FORMU Ä°ÅžLEMCÄ°SÄ° ---
    if (loginForm) {
        loginForm.addEventListener("submit", (e) => {
            e.preventDefault(); // Formun sayfayÄ± yenilemesini engelle

            const username = usernameInput.value;
            const password = passwordInput.value;

            // Ã–nceki hatalarÄ± temizle ve butonu kilitle
            errorMessage.textContent = "";
            hintMessage.textContent = "";
            submitButton.disabled = true;
            submitButton.textContent = "GiriÅŸ YapÄ±lÄ±yor...";

            // === GÄ°RÄ°LEN BÄ°LGÄ°LERÄ° KONTROL ET ===
            // KullanÄ±cÄ± adÄ± "admin" VE ÅŸifre "asker123" mÃ¼ diye bak
            if (username === "admin" && password === "asker123") {
                
                // Bilgiler doÄŸru, 1 saniye bekleyip yÃ¶nlendir (isteÄŸe baÄŸlÄ±)
                console.log("GiriÅŸ baÅŸarÄ±lÄ±!");
                setTimeout(() => {
                    window.location.href = 'admin-dashboard.html'; // BaÅŸarÄ±lÄ± olunca yÃ¶nlendir
                }, 500); // YarÄ±m saniye bekler

            } else {
                
                // Bilgiler yanlÄ±ÅŸ, hata ver.
                console.error("GiriÅŸ hatasÄ±: KullanÄ±cÄ± adÄ± veya ÅŸifre yanlÄ±ÅŸ.");
                errorMessage.textContent = "KullanÄ±cÄ± adÄ± veya ÅŸifre hatalÄ±.";
                
                // Butonu tekrar aktif et
                submitButton.disabled = false;
                submitButton.textContent = "GiriÅŸ Yap";
            }
        });
    }

    // --- 2. ÅžÄ°FREMÄ° UNUTTUM LÄ°NKÄ° ---
    // Bu link artÄ±k Firebase'e baÄŸlÄ± olmadÄ±ÄŸÄ± iÃ§in basit bir mesaj gÃ¶sterelim.
    if (forgotPasswordLink) {
        forgotPasswordLink.addEventListener("click", (e) => {
            e.preventDefault();
            hintMessage.textContent = ""; // DiÄŸer mesajlarÄ± temizle
            errorMessage.textContent = "Bu Ã¶zellik ÅŸu anda devre dÄ±ÅŸÄ±dÄ±r.";
        });
    }

    // Hata mesajÄ±na tÄ±klanÄ±rsa mesajÄ± temizle
    if (errorMessage) {
        errorMessage.addEventListener("click", () => {
            errorMessage.textContent = "";
        });
    }
});